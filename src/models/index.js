// This code is autogenerated by Sequelize, and has been adapted for a slightly
// different config environment.
import fs from 'fs';
import path from 'path';
import Sequelize from 'sequelize';

import configurations from '../config/database';

const env = process.env.NODE_ENV || 'development';
const config = configurations[env];

const basename = path.basename(__filename);
const db = {};

// If the configuration states to use an environment variable for configuration
// (e.g. when it is deployed on Heroku), then use that instead.
let sequelize = null;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}

// Load in all the model definitions using `sequelize.import` and assign them
// to our db object for importing later.
fs.readdirSync(__dirname)
  .filter(file => {
    return file.indexOf('.') !== 0 && file !== basename && file.slice(-3) === '.js';
  })
  .forEach(file => {
    const model = sequelize.import(path.join(__dirname, file));
    db[model.name] = model;
  });

// If there were any associations defined in the model files, run
// `associate()`.
Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

// Export sequelize and Sequelize too, for easy use.
db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;
